# bridge.py: A bridge plugin

import threading
import traceback
import requests
import discord
import asyncio
import difflib
import smtpd
import inbox
import time
import sys

from hooks import Hook

TOKEN = 'MjE1MDU5NjA4MjMyOTE5MDQw.CpSDgw.smhe9pdnleRBdPnbty6b2H7htOI'
ID_programming = "214558081399521280"
MAILGUN = "https://api.mailgun.net/v3/mg.xa0.uk/messages"
AUTH = ("api","key-365d86a4b2c3006e8ea4a46486b7766b")

@Hook('PRIVMSG')
def emailbridge(bot, ev):
    if not bot.master.data.get('email', False):
        return ev
        
    if bot.master.data['lock'].acquire(False):
        mbox = bot.master.data.get('inbox', None)
        if mbox == None:
            bot.master.data['inbox'] = mbox = setupMailbox(bot)
        bot.master.data['lock'].release()

    chans = [("subluminal","programming"), ("york","cs-york")]
    for net,chan in chans:
        if bot.name == net and ev.msg[0] != '[' and ev.user.nick != '***' and ev.dest == '#'+chan:
            if ev.msg[:8] == '\x01ACTION ' and ev.msg[-1] == '\x01':
                msg = "*"+ev.user.nick+"* "+ev.msg[8:-1]
            else:
                msg = "<"+ev.user.nick+"> "+ev.msg
            email = {
                "from": "%s+%s@mg.xa0.uk" %(net, chan),
                "to": [ "tony.olagbaiye@uk.thalesgroup.com" ],
                "subject": time.strftime("%X"),
                "text": msg
            }
            resp = requests.post(MAILGUN, auth=AUTH, data=email)
            print("MAILGUN [%d] %s" %(resp.status_code, resp.text))
    return ev

def setupMailbox(bot):
    mbox = inbox.Inbox()

    @mbox.collate
    def handle(to, sender, subject, body):
        print("SMTPD", (to,sender,subject,body))
        try:
            net,chan = to[0].split('@', 1)[0].split('+', 1)
            msg = body.split("\n")[-2]
            bot.ring[net].privmsg('#'+chan, msg)
        except Exception as e:
            traceback.print_exc()

    threading.Thread(name="SMTP", target=mbox.serve, kwargs={'address':'0.0.0.0', 'port':1025}).start()

    return mbox

@Hook('PRIVMSG')
def chanbridge(bot, ev):
    return ev
    for net,chan in [("subluminal","programming"), ("york","cs-york")]:
        if bot.name == net and ev.msg[0] != '[' and ev.user.nick != '***' and ev.dest == '#'+chan:
            if ev.msg[:8] == '\x01ACTION ' and ev.msg[-1] == '\x01':
                msg = ev.msg[8:-1]
                nick = '* '+ev.user.nick
            else:
                msg = ev.msg
                nick = '<'+ev.user.nick+'>'
            try:
                bot.ring['freenode'].privmsg('#-#'+chan, '%s %s' %(nick, msg))
            except KeyError:
                print("Couldn't find Freenode-side bridge")
        if bot.name == 'freenode' and ev.msg[0] != '[' and ev.user.nick != '***' and ev.dest == '#-#'+chan:
            try:
                bot.ring[net].privmsg('#'+chan, ev.msg)
            except KeyError:
                print("Couldn't find bot-side bridge")
    return ev

@Hook('PRIVMSG')
def discordbridge(bot, ev):
    if bot.name == 'subluminal':
        client = bot.data.get('discord', None)
        if client == None:
            bot.data['discord'] = client = setupClient(bot)

        if ev.msg[0] != '[' and ev.user.nick != '***' and ev.dest == "#programming":
            if ev.msg[:8] == '\x01ACTION ' and ev.msg[-1] == '\x01':
                msg = ev.msg[8:-1]
                nick = '* '+ev.user.nick
            else:
                msg = ev.msg
                nick = '<'+ev.user.nick+'>'
            line = ' %s %s' %(nick, msg)
            discord_send(bot.master.loop, client, ID_programming, line)
    return ev

def setupClient(bot):
    client = discord.Client(loop=bot.master.loop)

    def colorhash(nick):
        rcolors = [19, 20, 22, 24, 25, 26, 27, 28, 29]
        rcolors = rcolors[1:] + [rcolors[0]]
        nc = rcolors[sum(ord(i) for i in nick) % 9] - 16
        return "\x03%d@%s\x03" %(nc, nick)
    
    @client.event
    async def on_ready():
        print("Discord Linked")

    @client.event
    async def on_message(message):
        nick = message.author.display_name
        print("[Discord] <%s/%s> %s"%(message.channel.name, nick, message.content))
        if message.author.name != "IRC" and message.channel.name == "programming":
            pfx = "[%s]" %(colorhash(nick),)
            if not not message.clean_content.strip():
                bot.ring['subluminal'].privmsg('#programming', "\x02%s\x02 %s"%(pfx, message.clean_content.replace("\n","\u21b5")))
            for i,item in enumerate(message.attachments):
                bot.ring['subluminal'].privmsg('#programming', "\x02%s (%d/%d)\x02 %s"%(pfx, i+1, len(message.attachments), item['url']))

    @client.event
    async def on_message_edit(before, after):
        nick = after.author.display_name
        print("[Discord] <%s/%s/Edit> %r -> %r"%(after.channel.name, nick, before.content, after.content))
        if after.author.name != "IRC" and after.channel.name == "programming":
            pfx = "[%s/Edit]" %(colorhash(nick),)
            if not not after.clean_content.strip():
                if before.clean_content != after.clean_content:
                    m_before = before.clean_content.replace("\n","\u21b5")
                    m_after = after.clean_content.replace("\n","\u21b5")
                    seqm = difflib.SequenceMatcher(None, m_before, m_after)
                    diff_output = []
                    for opcode,a0,a1,b0,b1 in seqm.get_opcodes():
                        if opcode == 'equal':
                            diff_output.append(seqm.a[a0:a1])
                        elif opcode == 'insert':
                            diff_output.append("\x02\x0303+\x03\x02" + seqm.b[b0:b1] + "\x02\x0303+\x03\x02")
                        elif opcode == 'delete':
                            diff_output.append("\x02\x0304-\x03\x02" + seqm.a[a0:a1] + "\x02\x0304-\x03\x02")
                        elif opcode == 'replace':
                            diff_output.append("\x02\x0304-\x03\x02" + seqm.a[a0:a1] + "\x02\x0304-\x03\x02")
                            diff_output.append("\x02\x0303+\x03\x02" + seqm.b[b0:b1] + "\x02\x0303+\x03\x02")
                        else:
                            diff_output = "\x02ERR\x02: unexpected opcode %s while calculating diff" %(opcode,)
                            break;
                    bot.ring['subluminal'].privmsg('#programming', "\x02%s\x02 %s"%(pfx, ''.join(diff_output).strip()))
            for i,item in enumerate([it for it in after.attachments if it['url'] not in [em['url'] for em in before.attachments]]):
                bot.ring['subluminal'].privmsg('#programming', "\x02%s (%d/??)\x02 %s"%(pfx, i+1, item['url']))

    def runClient():
        asyncio.set_event_loop(bot.master.loop)
        client.run(TOKEN)
    threading.Thread(name="Discord", target=runClient).start()

    return client

def discord_send(loop, client, chanid, msg):
    if not client.is_logged_in:
        raise Exception('Unable to connect to Discord')
    chan = client.get_channel(ID_programming)
    asyncio.ensure_future( client.send_message(chan, msg) , loop=loop)

